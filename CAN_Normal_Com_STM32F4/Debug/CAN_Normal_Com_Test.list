
CAN_Normal_Com_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800057c  0800057c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800057c  0800057c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800057c  0800057c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800057c  0800057c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800057c  0800057c  0001057c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000580  08000580  00010580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000584  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a16  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000060c  00000000  00000000  00021a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00022058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001a0  00000000  00000000  00022240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e637  00000000  00000000  000223e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ff6  00000000  00000000  00040a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb504  00000000  00000000  00042a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000fdf11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005e0  00000000  00000000  000fdf64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000564 	.word	0x08000564

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000564 	.word	0x08000564

080001c8 <GPIO_Init>:
uint8_t CAN1_Rx(void);
void TIM4_ms_Delay(uint32_t delay);
uint8_t k = 0;
uint8_t rec = 0;

void GPIO_Init(){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	// Enable GPIOA clock signal
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80001cc:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <GPIO_Init+0x34>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <GPIO_Init+0x34>)
 80001d2:	f043 0302 	orr.w	r3, r3, #2
 80001d6:	6313      	str	r3, [r2, #48]	; 0x30

	// Configuring PB8 and PB9 in alternate function mode
	GPIOB->MODER |= (GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1);
 80001d8:	4b09      	ldr	r3, [pc, #36]	; (8000200 <GPIO_Init+0x38>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a08      	ldr	r2, [pc, #32]	; (8000200 <GPIO_Init+0x38>)
 80001de:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80001e2:	6013      	str	r3, [r2, #0]

	// Selecting AF9 for PB8 and PB9 (See Page 272 of dm00031020)
	GPIOB->AFR[1] |= (GPIO_AFRH_AFSEL8_3 | GPIO_AFRH_AFSEL8_0 |
 80001e4:	4b06      	ldr	r3, [pc, #24]	; (8000200 <GPIO_Init+0x38>)
 80001e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001e8:	4a05      	ldr	r2, [pc, #20]	; (8000200 <GPIO_Init+0x38>)
 80001ea:	f043 0399 	orr.w	r3, r3, #153	; 0x99
 80001ee:	6253      	str	r3, [r2, #36]	; 0x24
					  GPIO_AFRH_AFSEL9_0 | GPIO_AFRH_AFSEL9_3);
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40023800 	.word	0x40023800
 8000200:	40020400 	.word	0x40020400

08000204 <CAN1_Init>:

void CAN1_Init(){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/* 1. Setting Up the Baud Rate and Configuring CAN1 in
	 * Loop Back Mode -------------------------------------------------------*/

	// Enable clock for CAN1
	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 8000208:	4b4d      	ldr	r3, [pc, #308]	; (8000340 <CAN1_Init+0x13c>)
 800020a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800020c:	4a4c      	ldr	r2, [pc, #304]	; (8000340 <CAN1_Init+0x13c>)
 800020e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000212:	6413      	str	r3, [r2, #64]	; 0x40

	// Entering CAN Initialization Mode and wait for acknowledgment
	CAN1->MCR |= CAN_MCR_INRQ;
 8000214:	4b4b      	ldr	r3, [pc, #300]	; (8000344 <CAN1_Init+0x140>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a4a      	ldr	r2, [pc, #296]	; (8000344 <CAN1_Init+0x140>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6013      	str	r3, [r2, #0]
	while (!(CAN1->MSR & CAN_MSR_INAK)){}
 8000220:	bf00      	nop
 8000222:	4b48      	ldr	r3, [pc, #288]	; (8000344 <CAN1_Init+0x140>)
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	f003 0301 	and.w	r3, r3, #1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d0f9      	beq.n	8000222 <CAN1_Init+0x1e>

	//Exit Sleep Mode
	CAN1->MCR &= ~CAN_MCR_SLEEP;
 800022e:	4b45      	ldr	r3, [pc, #276]	; (8000344 <CAN1_Init+0x140>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a44      	ldr	r2, [pc, #272]	; (8000344 <CAN1_Init+0x140>)
 8000234:	f023 0302 	bic.w	r3, r3, #2
 8000238:	6013      	str	r3, [r2, #0]
	while (CAN1->MSR & CAN_MSR_SLAK){}
 800023a:	bf00      	nop
 800023c:	4b41      	ldr	r3, [pc, #260]	; (8000344 <CAN1_Init+0x140>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	f003 0302 	and.w	r3, r3, #2
 8000244:	2b00      	cmp	r3, #0
 8000246:	d1f9      	bne.n	800023c <CAN1_Init+0x38>

	//Set Loop back mode for CAN1
	//CAN1->BTR |= CAN_BTR_LBKM;

	//Setting the Re synchronization jump width to 1
	CAN1->BTR &= ~CAN_BTR_SJW;
 8000248:	4b3e      	ldr	r3, [pc, #248]	; (8000344 <CAN1_Init+0x140>)
 800024a:	69db      	ldr	r3, [r3, #28]
 800024c:	4a3d      	ldr	r2, [pc, #244]	; (8000344 <CAN1_Init+0x140>)
 800024e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000252:	61d3      	str	r3, [r2, #28]

	//Setting the no. of time quanta for Time segment 2
	// TS2 = 4-1;
	CAN1->BTR &= ~(CAN_BTR_TS2);
 8000254:	4b3b      	ldr	r3, [pc, #236]	; (8000344 <CAN1_Init+0x140>)
 8000256:	69db      	ldr	r3, [r3, #28]
 8000258:	4a3a      	ldr	r2, [pc, #232]	; (8000344 <CAN1_Init+0x140>)
 800025a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800025e:	61d3      	str	r3, [r2, #28]
	CAN1->BTR |= (CAN_BTR_TS2_1 | CAN_BTR_TS2_0);
 8000260:	4b38      	ldr	r3, [pc, #224]	; (8000344 <CAN1_Init+0x140>)
 8000262:	69db      	ldr	r3, [r3, #28]
 8000264:	4a37      	ldr	r2, [pc, #220]	; (8000344 <CAN1_Init+0x140>)
 8000266:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800026a:	61d3      	str	r3, [r2, #28]

	//Setting the no. of time quanta for Time segment 1
	// TS1 = 3-1;
	CAN1->BTR &= ~(CAN_BTR_TS1);
 800026c:	4b35      	ldr	r3, [pc, #212]	; (8000344 <CAN1_Init+0x140>)
 800026e:	69db      	ldr	r3, [r3, #28]
 8000270:	4a34      	ldr	r2, [pc, #208]	; (8000344 <CAN1_Init+0x140>)
 8000272:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000276:	61d3      	str	r3, [r2, #28]
	CAN1->BTR |= (CAN_BTR_TS1_1);
 8000278:	4b32      	ldr	r3, [pc, #200]	; (8000344 <CAN1_Init+0x140>)
 800027a:	69db      	ldr	r3, [r3, #28]
 800027c:	4a31      	ldr	r2, [pc, #196]	; (8000344 <CAN1_Init+0x140>)
 800027e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000282:	61d3      	str	r3, [r2, #28]

	//Setting the Baud rate Pre-scalar for CAN1
	// BRP[9:0] = 16-1
	CAN1->BTR |= ((16-1)<<0);
 8000284:	4b2f      	ldr	r3, [pc, #188]	; (8000344 <CAN1_Init+0x140>)
 8000286:	69db      	ldr	r3, [r3, #28]
 8000288:	4a2e      	ldr	r2, [pc, #184]	; (8000344 <CAN1_Init+0x140>)
 800028a:	f043 030f 	orr.w	r3, r3, #15
 800028e:	61d3      	str	r3, [r2, #28]

	/* 2. Configuring the Filters--------------------------------------------*/
	//Enter Filter Initialization mode to configure the filters
	CAN1->FMR |= CAN_FMR_FINIT;
 8000290:	4b2c      	ldr	r3, [pc, #176]	; (8000344 <CAN1_Init+0x140>)
 8000292:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000296:	4a2b      	ldr	r2, [pc, #172]	; (8000344 <CAN1_Init+0x140>)
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	// Configuring the Number of Filters Reserved for CAN1
	// and also the start bank for CAN2
	CAN1->FMR |= 14<<8;
 80002a0:	4b28      	ldr	r3, [pc, #160]	; (8000344 <CAN1_Init+0x140>)
 80002a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80002a6:	4a27      	ldr	r2, [pc, #156]	; (8000344 <CAN1_Init+0x140>)
 80002a8:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 80002ac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	// Select the single 32-bit scale configuration
	CAN1->FS1R |= CAN_FS1R_FSC13;
 80002b0:	4b24      	ldr	r3, [pc, #144]	; (8000344 <CAN1_Init+0x140>)
 80002b2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80002b6:	4a23      	ldr	r2, [pc, #140]	; (8000344 <CAN1_Init+0x140>)
 80002b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002bc:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c

	// Set the receive ID
	CAN1->sFilterRegister[13].FR1 = 0x103<<21;
 80002c0:	4b20      	ldr	r3, [pc, #128]	; (8000344 <CAN1_Init+0x140>)
 80002c2:	4a21      	ldr	r2, [pc, #132]	; (8000348 <CAN1_Init+0x144>)
 80002c4:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8

	// Select Identifier List mode
	CAN1->FM1R |= CAN_FM1R_FBM13;
 80002c8:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <CAN1_Init+0x140>)
 80002ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80002ce:	4a1d      	ldr	r2, [pc, #116]	; (8000344 <CAN1_Init+0x140>)
 80002d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002d4:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

	//Activating filter 13
	CAN1->FA1R |= CAN_FA1R_FACT13;
 80002d8:	4b1a      	ldr	r3, [pc, #104]	; (8000344 <CAN1_Init+0x140>)
 80002da:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80002de:	4a19      	ldr	r2, [pc, #100]	; (8000344 <CAN1_Init+0x140>)
 80002e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002e4:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	//Exit filter Initialization Mode
	CAN1->FMR &= ~CAN_FMR_FINIT;
 80002e8:	4b16      	ldr	r3, [pc, #88]	; (8000344 <CAN1_Init+0x140>)
 80002ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80002ee:	4a15      	ldr	r2, [pc, #84]	; (8000344 <CAN1_Init+0x140>)
 80002f0:	f023 0301 	bic.w	r3, r3, #1
 80002f4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/* 2. Setting up the Transmission----------------------------------------*/

	CAN1->sTxMailBox[0].TIR = 0;
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <CAN1_Init+0x140>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	//Setting up the Std. ID
	CAN1->sTxMailBox[0].TIR = (0x245<<21);
 8000300:	4b10      	ldr	r3, [pc, #64]	; (8000344 <CAN1_Init+0x140>)
 8000302:	4a12      	ldr	r2, [pc, #72]	; (800034c <CAN1_Init+0x148>)
 8000304:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	CAN1->sTxMailBox[0].TDHR = 0;
 8000308:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <CAN1_Init+0x140>)
 800030a:	2200      	movs	r2, #0
 800030c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

	// Setting Data Length to 1 Byte.
	CAN1->sTxMailBox[0].TDTR = 1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <CAN1_Init+0x140>)
 8000312:	2201      	movs	r2, #1
 8000314:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	// Exit the Initialization mode for CAN1
	// Wait until the INAK bit is cleared by hardware
	CAN1->MCR &= ~CAN_MCR_INRQ;
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <CAN1_Init+0x140>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a09      	ldr	r2, [pc, #36]	; (8000344 <CAN1_Init+0x140>)
 800031e:	f023 0301 	bic.w	r3, r3, #1
 8000322:	6013      	str	r3, [r2, #0]
	while (CAN1->MSR & CAN_MSR_INAK){}
 8000324:	bf00      	nop
 8000326:	4b07      	ldr	r3, [pc, #28]	; (8000344 <CAN1_Init+0x140>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	2b00      	cmp	r3, #0
 8000330:	d1f9      	bne.n	8000326 <CAN1_Init+0x122>

}
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40023800 	.word	0x40023800
 8000344:	40006400 	.word	0x40006400
 8000348:	20600000 	.word	0x20600000
 800034c:	48a00000 	.word	0x48a00000

08000350 <CAN1_Tx>:

void CAN1_Tx(uint8_t tr){
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
	// Put the Data to be transmitted into Mailbox Data Low Register
	CAN1->sTxMailBox[0].TDLR = tr;
 800035a:	4a09      	ldr	r2, [pc, #36]	; (8000380 <CAN1_Tx+0x30>)
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188

	// Request for Transmission
	CAN1->sTxMailBox[0].TIR |= 1;
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <CAN1_Tx+0x30>)
 8000364:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000368:	4a05      	ldr	r2, [pc, #20]	; (8000380 <CAN1_Tx+0x30>)
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40006400 	.word	0x40006400

08000384 <TIM4_ms_Delay>:
	CAN1->RF0R |= 1<<5;

	return RxD;
}

void TIM4_ms_Delay(uint32_t delay){
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= 1<<2; //Start the clock for the timer peripheral
 800038c:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <TIM4_ms_Delay+0x5c>)
 800038e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000390:	4a13      	ldr	r2, [pc, #76]	; (80003e0 <TIM4_ms_Delay+0x5c>)
 8000392:	f043 0304 	orr.w	r3, r3, #4
 8000396:	6413      	str	r3, [r2, #64]	; 0x40
	TIM4->PSC = 16000-1; //Setting the clock frequency to 1kHz.
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <TIM4_ms_Delay+0x60>)
 800039a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800039e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = (delay); // Total period of the timer
 80003a0:	4a10      	ldr	r2, [pc, #64]	; (80003e4 <TIM4_ms_Delay+0x60>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM4->CNT = 0;
 80003a6:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <TIM4_ms_Delay+0x60>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CR1 |= 1; //Start the Timer
 80003ac:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <TIM4_ms_Delay+0x60>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a0c      	ldr	r2, [pc, #48]	; (80003e4 <TIM4_ms_Delay+0x60>)
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	6013      	str	r3, [r2, #0]
	while(!(TIM4->SR & TIM_SR_UIF)){} //Polling the update interrupt flag
 80003b8:	bf00      	nop
 80003ba:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <TIM4_ms_Delay+0x60>)
 80003bc:	691b      	ldr	r3, [r3, #16]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d0f9      	beq.n	80003ba <TIM4_ms_Delay+0x36>
	TIM4->SR &= ~(0x0001); //Reset the update interrupt flag
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <TIM4_ms_Delay+0x60>)
 80003c8:	691b      	ldr	r3, [r3, #16]
 80003ca:	4a06      	ldr	r2, [pc, #24]	; (80003e4 <TIM4_ms_Delay+0x60>)
 80003cc:	f023 0301 	bic.w	r3, r3, #1
 80003d0:	6113      	str	r3, [r2, #16]
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40023800 	.word	0x40023800
 80003e4:	40000800 	.word	0x40000800

080003e8 <main>:

int main(void){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	GPIO_Init();
 80003ec:	f7ff feec 	bl	80001c8 <GPIO_Init>
	CAN1_Init();
 80003f0:	f7ff ff08 	bl	8000204 <CAN1_Init>
	while(1){
		CAN1_Tx(k);
 80003f4:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <main+0x3c>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ffa9 	bl	8000350 <CAN1_Tx>
		//rec = CAN1_Rx();
		k += 1;
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <main+0x3c>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	3301      	adds	r3, #1
 8000404:	b2da      	uxtb	r2, r3
 8000406:	4b07      	ldr	r3, [pc, #28]	; (8000424 <main+0x3c>)
 8000408:	701a      	strb	r2, [r3, #0]
		if (k>25)
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <main+0x3c>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b19      	cmp	r3, #25
 8000410:	d902      	bls.n	8000418 <main+0x30>
			k = 0;
 8000412:	4b04      	ldr	r3, [pc, #16]	; (8000424 <main+0x3c>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
		TIM4_ms_Delay(1000);
 8000418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800041c:	f7ff ffb2 	bl	8000384 <TIM4_ms_Delay>
		CAN1_Tx(k);
 8000420:	e7e8      	b.n	80003f4 <main+0xc>
 8000422:	bf00      	nop
 8000424:	20000020 	.word	0x20000020

08000428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800042c:	e7fe      	b.n	800042c <NMI_Handler+0x4>

0800042e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <HardFault_Handler+0x4>

08000434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <MemManage_Handler+0x4>

0800043a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <BusFault_Handler+0x4>

08000440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <UsageFault_Handler+0x4>

08000446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000474:	f000 f83e 	bl	80004f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}

0800047c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <SystemInit+0x20>)
 8000482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000486:	4a05      	ldr	r2, [pc, #20]	; (800049c <SystemInit+0x20>)
 8000488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800048c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	e000ed00 	.word	0xe000ed00

080004a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004a4:	480d      	ldr	r0, [pc, #52]	; (80004dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004a6:	490e      	ldr	r1, [pc, #56]	; (80004e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004a8:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ac:	e002      	b.n	80004b4 <LoopCopyDataInit>

080004ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b2:	3304      	adds	r3, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b8:	d3f9      	bcc.n	80004ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ba:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004bc:	4c0b      	ldr	r4, [pc, #44]	; (80004ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c0:	e001      	b.n	80004c6 <LoopFillZerobss>

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c4:	3204      	adds	r2, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004ca:	f7ff ffd7 	bl	800047c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ce:	f000 f825 	bl	800051c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004d2:	f7ff ff89 	bl	80003e8 <main>
  bx  lr    
 80004d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80004d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004e4:	08000584 	.word	0x08000584
  ldr r2, =_sbss
 80004e8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004ec:	20000028 	.word	0x20000028

080004f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004f0:	e7fe      	b.n	80004f0 <ADC_IRQHandler>
	...

080004f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <HAL_IncTick+0x20>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	461a      	mov	r2, r3
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <HAL_IncTick+0x24>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4413      	add	r3, r2
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <HAL_IncTick+0x24>)
 8000506:	6013      	str	r3, [r2, #0]
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000000 	.word	0x20000000
 8000518:	20000024 	.word	0x20000024

0800051c <__libc_init_array>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	4d0d      	ldr	r5, [pc, #52]	; (8000554 <__libc_init_array+0x38>)
 8000520:	4c0d      	ldr	r4, [pc, #52]	; (8000558 <__libc_init_array+0x3c>)
 8000522:	1b64      	subs	r4, r4, r5
 8000524:	10a4      	asrs	r4, r4, #2
 8000526:	2600      	movs	r6, #0
 8000528:	42a6      	cmp	r6, r4
 800052a:	d109      	bne.n	8000540 <__libc_init_array+0x24>
 800052c:	4d0b      	ldr	r5, [pc, #44]	; (800055c <__libc_init_array+0x40>)
 800052e:	4c0c      	ldr	r4, [pc, #48]	; (8000560 <__libc_init_array+0x44>)
 8000530:	f000 f818 	bl	8000564 <_init>
 8000534:	1b64      	subs	r4, r4, r5
 8000536:	10a4      	asrs	r4, r4, #2
 8000538:	2600      	movs	r6, #0
 800053a:	42a6      	cmp	r6, r4
 800053c:	d105      	bne.n	800054a <__libc_init_array+0x2e>
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	f855 3b04 	ldr.w	r3, [r5], #4
 8000544:	4798      	blx	r3
 8000546:	3601      	adds	r6, #1
 8000548:	e7ee      	b.n	8000528 <__libc_init_array+0xc>
 800054a:	f855 3b04 	ldr.w	r3, [r5], #4
 800054e:	4798      	blx	r3
 8000550:	3601      	adds	r6, #1
 8000552:	e7f2      	b.n	800053a <__libc_init_array+0x1e>
 8000554:	0800057c 	.word	0x0800057c
 8000558:	0800057c 	.word	0x0800057c
 800055c:	0800057c 	.word	0x0800057c
 8000560:	08000580 	.word	0x08000580

08000564 <_init>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	bf00      	nop
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr

08000570 <_fini>:
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000572:	bf00      	nop
 8000574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000576:	bc08      	pop	{r3}
 8000578:	469e      	mov	lr, r3
 800057a:	4770      	bx	lr
